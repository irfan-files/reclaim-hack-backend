"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLocalGnarkZkOperator = makeLocalGnarkZkOperator;
const path_1 = require("path");
const config_1 = require("./config");
const js_base64_1 = require("js-base64");
let koffi;
let verify;
let free;
let prove;
let initAlgorithm;
let initDone = false;
try {
    koffi = require('koffi');
    if (koffi === null || koffi === void 0 ? void 0 : koffi.version) {
        koffi.reset(); //otherwise tests will fail
        // define object GoSlice to map to:
        // C type struct { void *data; GoInt len; GoInt cap; }
        const GoSlice = koffi.struct('GoSlice', {
            data: 'void *',
            len: 'longlong',
            cap: 'longlong'
        });
        const ProveReturn = koffi.struct('ProveReturn', {
            r0: 'void *',
            r1: 'longlong',
        });
        const resFolder = `../resources/gnark`;
        const arch = process.arch;
        const libVerifyPath = (0, path_1.join)(__dirname, `${resFolder}/${arch}/libverify.so`);
        const libProvePath = (0, path_1.join)(__dirname, `${resFolder}/${arch}/libprove.so`);
        const libVerify = koffi.load(libVerifyPath);
        const libProve = koffi.load(libProvePath);
        verify = libVerify.func('Verify', 'unsigned char', [GoSlice]);
        free = libProve.func('Free', 'void', ['void *']);
        prove = libProve.func('Prove', ProveReturn, [GoSlice]);
        initAlgorithm = libProve.func('InitAlgorithm', 'unsigned char', ['unsigned char', GoSlice, GoSlice]);
    }
}
catch (e) {
    koffi = undefined;
    console.log("Gnark is only supported on linux x64 & ARM64.", e.toString());
}
async function makeLocalGnarkZkOperator(cipher) {
    if (koffi) {
        async function initGnark() {
            const { join } = await Promise.resolve().then(() => __importStar(require('path')));
            const fs = require('fs');
            const folder = `../resources/gnark`;
            let keyPath = join(__dirname, `${folder}/pk.chacha20`);
            let keyFile = fs.readFileSync(keyPath);
            let r1Path = join(__dirname, `${folder}/r1cs.chacha20`);
            let r1File = fs.readFileSync(r1Path);
            let f1 = {
                data: Buffer.from(keyFile),
                len: keyFile.length,
                cap: keyFile.length
            };
            let f2 = {
                data: Buffer.from(r1File),
                len: r1File.length,
                cap: r1File.length
            };
            initAlgorithm(0, f1, f2);
            keyPath = join(__dirname, `${folder}/pk.aes128`);
            keyFile = fs.readFileSync(keyPath);
            r1Path = join(__dirname, `${folder}/r1cs.aes128`);
            r1File = fs.readFileSync(r1Path);
            f1 = {
                data: Buffer.from(keyFile),
                len: keyFile.length,
                cap: keyFile.length
            };
            f2 = {
                data: Buffer.from(r1File),
                len: r1File.length,
                cap: r1File.length
            };
            initAlgorithm(1, f1, f2);
            keyPath = join(__dirname, `${folder}/pk.aes256`);
            keyFile = fs.readFileSync(keyPath);
            r1Path = join(__dirname, `${folder}/r1cs.aes256`);
            r1File = fs.readFileSync(r1Path);
            f1 = {
                data: Buffer.from(keyFile),
                len: keyFile.length,
                cap: keyFile.length
            };
            f2 = {
                data: Buffer.from(r1File),
                len: r1File.length,
                cap: r1File.length
            };
            initAlgorithm(2, f1, f2);
            initDone = true;
        }
        return Promise.resolve({
            async generateWitness(input) {
                return generateGnarkWitness(cipher, input);
            },
            //used in nodeJS only for tests
            async groth16Prove(witness) {
                if (!initDone) {
                    await initGnark();
                }
                const wtns = {
                    data: Buffer.from(witness),
                    len: witness.length,
                    cap: witness.length
                };
                const res = prove(wtns);
                const resJson = Buffer.from(koffi.decode(res.r0, 'unsigned char', res.r1)).toString();
                free(res.r0); // Avoid memory leak!
                const proof = JSON.parse(resJson);
                return Promise.resolve(proof);
            },
            async groth16Verify(publicSignals, proof) {
                const { bitsToUint8Array } = config_1.CONFIG[cipher];
                const proofStr = proof['proofJson'];
                const verifyParams = {
                    cipher: cipher,
                    proof: proofStr,
                    publicSignals: js_base64_1.Base64.fromUint8Array(bitsToUint8Array(publicSignals.flat())),
                };
                const paramsJson = JSON.stringify(verifyParams);
                const paramsBuf = strToUint8Array(paramsJson);
                const params = {
                    data: paramsBuf,
                    len: paramsJson.length,
                    cap: paramsJson.length
                };
                return verify(params) === 1;
            },
        });
    }
    else {
        return Promise.resolve({
            async generateWitness(input) {
                return generateGnarkWitness(cipher, input);
            },
            async groth16Prove(witness) {
                throw new Error("not supported");
            },
            async groth16Verify(publicSignals, proof) {
                throw new Error("not supported");
            },
        });
    }
}
function generateGnarkWitness(cipher, input) {
    const { bitsToUint8Array, isLittleEndian } = config_1.CONFIG[cipher];
    //input is bits, we convert them back to bytes
    const proofParams = {
        cipher: cipher,
        key: js_base64_1.Base64.fromUint8Array(bitsToUint8Array(input.key.flat())),
        nonce: js_base64_1.Base64.fromUint8Array(bitsToUint8Array(input.nonce.flat())),
        counter: deSerialiseCounter(),
        input: js_base64_1.Base64.fromUint8Array(bitsToUint8Array(input.in.flat())),
    };
    const paramsJson = JSON.stringify(proofParams);
    return strToUint8Array(paramsJson);
    function deSerialiseCounter() {
        const bytes = bitsToUint8Array(input.counter);
        const counterView = new DataView(bytes.buffer);
        return counterView.getUint32(0, isLittleEndian);
    }
}
function strToUint8Array(str) {
    return new TextEncoder().encode(str);
}
